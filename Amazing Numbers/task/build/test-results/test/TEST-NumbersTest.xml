<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="NumbersTest" tests="1" skipped="0" failures="1" errors="0" timestamp="2021-09-27T19:10:58" hostname="DESKTOP-E396EDH" time="0.832">
  <properties/>
  <testcase name="start" classname="NumbersTest" time="0.832">
    <failure message="java.lang.AssertionError: Wrong answer in test #18&#10;&#10;Can't parse line: &quot;1 odd palindrome &quot;. Expected: 1 is ...&#10;&#10;Please find below the output of your program during this failed test.&#10;Note that the '&gt;' character indicates the beginning of the input line.&#10;&#10;---&#10;&#10;Welcome to Amazing Numbers!&#10;&#10;Supported requests:&#10;- enter a natural number to know its properties;&#10;- enter two natural numbers to obtain the properties of the list:&#10;  * the first parameter represents a starting number;&#10;  * the second parameters show how many consecutive numbers are to be processed;&#10;- separate the parameters with one space;&#10;- enter 0 to exit.&#10;&#10;Enter a request: &#10;&#10;&gt; 1 15&#10;1 odd palindrome &#10;2 even &#10;3 odd &#10;4 even &#10;5 odd &#10;6 even &#10;7 odd buzz &#10;8 even &#10;9 odd &#10;10 even duck &#10;11 odd &#10;12 even &#10;13 odd &#10;14 even buzz &#10;15 odd &#10;&#10;Enter a request:" type="java.lang.AssertionError">java.lang.AssertionError: Wrong answer in test #18

Can't parse line: &quot;1 odd palindrome &quot;. Expected: 1 is ...

Please find below the output of your program during this failed test.
Note that the '&gt;' character indicates the beginning of the input line.

---

Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

&gt; 1 15
1 odd palindrome 
2 even 
3 odd 
4 even 
5 odd 
6 even 
7 odd buzz 
8 even 
9 odd 
10 even duck 
11 odd 
12 even 
13 odd 
14 even buzz 
15 odd 

Enter a request:
	at org.junit.Assert.fail(Assert.java:88)
	at org.hyperskill.hstest.stage.StageTest.start(StageTest.java:155)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:121)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164)
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:414)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
  </testcase>
  <system-out><![CDATA[?[1;31m
Start test 1?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 2?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> -91
The first parameter should be a natural number or zero.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 3?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> -118
The first parameter should be a natural number or zero.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 4?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> -68
The first parameter should be a natural number or zero.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 5?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> -43
The first parameter should be a natural number or zero.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 6?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> -53
The first parameter should be a natural number or zero.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 7?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> 17234 -16836
The second parameter should be a natural number.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 8?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> 22225 -3979
The second parameter should be a natural number.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 9?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> 18286 -7765
The second parameter should be a natural number.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 10?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> 17834 -23392
The second parameter should be a natural number.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 11?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> 6711 -585
The second parameter should be a natural number.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 12?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> 20263 -589
The second parameter should be a natural number.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 13?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> 19295 -18902
The second parameter should be a natural number.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 14?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> 3384 -25841
The second parameter should be a natural number.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 15?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> 456 -14773
The second parameter should be a natural number.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 16?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> 11852 -25647
The second parameter should be a natural number.

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 17?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> 1
 Properties of 1
	       even: false
	        odd: true
	       buzz: false
	       duck: false
	palindromic: true
	     gapful: false

Enter a request: 

> 2
 Properties of 2
	       even: true
	        odd: false
	       buzz: false
	       duck: false
	palindromic: true
	     gapful: false

Enter a request: 

> 3
 Properties of 3
	       even: false
	        odd: true
	       buzz: false
	       duck: false
	palindromic: true
	     gapful: false

Enter a request: 

> 4
 Properties of 4
	       even: true
	        odd: false
	       buzz: false
	       duck: false
	palindromic: true
	     gapful: false

Enter a request: 

> 5
 Properties of 5
	       even: false
	        odd: true
	       buzz: false
	       duck: false
	palindromic: true
	     gapful: false

Enter a request: 

> 6
 Properties of 6
	       even: true
	        odd: false
	       buzz: false
	       duck: false
	palindromic: true
	     gapful: false

Enter a request: 

> 7
 Properties of 7
	       even: false
	        odd: true
	       buzz: true
	       duck: false
	palindromic: true
	     gapful: false

Enter a request: 

> 8
 Properties of 8
	       even: true
	        odd: false
	       buzz: false
	       duck: false
	palindromic: true
	     gapful: false

Enter a request: 

> 9
 Properties of 9
	       even: false
	        odd: true
	       buzz: false
	       duck: false
	palindromic: true
	     gapful: false

Enter a request: 

> 10
 Properties of 10
	       even: true
	        odd: false
	       buzz: false
	       duck: true
	palindromic: false
	     gapful: false

Enter a request: 

> 11
 Properties of 11
	       even: false
	        odd: true
	       buzz: false
	       duck: false
	palindromic: true
	     gapful: false

Enter a request: 

> 12
 Properties of 12
	       even: true
	        odd: false
	       buzz: false
	       duck: false
	palindromic: false
	     gapful: false

Enter a request: 

> 13
 Properties of 13
	       even: false
	        odd: true
	       buzz: false
	       duck: false
	palindromic: false
	     gapful: false

Enter a request: 

> 14
 Properties of 14
	       even: true
	        odd: false
	       buzz: true
	       duck: false
	palindromic: false
	     gapful: false

Enter a request: 

> 529326379299187312
 Properties of 529326379299187312
	       even: true
	        odd: false
	       buzz: false
	       duck: false
	palindromic: false
	     gapful: false

Enter a request: 

> 7628821688459701904
 Properties of 7628821688459701904
	       even: true
	        odd: false
	       buzz: false
	       duck: true
	palindromic: false
	     gapful: false

Enter a request: 

> 7413507722371557282
 Properties of 7413507722371557282
	       even: true
	        odd: false
	       buzz: true
	       duck: true
	palindromic: false
	     gapful: false

Enter a request: 

> 7973554431517514377
 Properties of 7973554431517514377
	       even: false
	        odd: true
	       buzz: true
	       duck: false
	palindromic: false
	     gapful: false

Enter a request: 

> 5754616688104820346
 Properties of 5754616688104820346
	       even: true
	        odd: false
	       buzz: false
	       duck: true
	palindromic: false
	     gapful: false

Enter a request: 

> 7223178285832886638
 Properties of 7223178285832886638
	       even: true
	        odd: false
	       buzz: false
	       duck: false
	palindromic: false
	     gapful: false

Enter a request: 

> 76165807595725837
 Properties of 76165807595725837
	       even: false
	        odd: true
	       buzz: true
	       duck: true
	palindromic: false
	     gapful: false

Enter a request: 

> 7918499447019905013
 Properties of 7918499447019905013
	       even: false
	        odd: true
	       buzz: false
	       duck: true
	palindromic: false
	     gapful: false

Enter a request: 

> 4682985274304698707
 Properties of 4682985274304698707
	       even: false
	        odd: true
	       buzz: true
	       duck: true
	palindromic: false
	     gapful: false

Enter a request: 

> 7715915260438493139
 Properties of 7715915260438493139
	       even: false
	        odd: true
	       buzz: false
	       duck: true
	palindromic: false
	     gapful: false

Enter a request: 

> 0
Goodbye!
?[1;31m
Start test 18?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: 

> 1 15
1 odd palindrome 
2 even 
3 odd 
4 even 
5 odd 
6 even 
7 odd buzz 
8 even 
9 odd 
10 even duck 
11 odd 
12 even 
13 odd 
14 even buzz 
15 odd 

Enter a request: 

]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
